{
  "claude-md-content": {
    "value": "# üö® PROJECT AI INSTRUCTIONS üö®\n\n## GOAL\n\nWe are working on AIPatternEnforcer which is a meta project that has the goal to create a reusable project structure\nthat solves common friction points when developing software with AI tools like Cursor and Claude by default design. It\nshould be copy and pastable and should be a starting point for any project.\n\n**üè† TARGET USE CASE: LOCAL ONE-PERSON AI APPS ONLY**\n\n- This template is for LOCAL development of personal AI projects\n- NO enterprise features, authentication, user management, or multi-tenant systems\n- Think: AI dating assistant (writing messages, swiping, understanding user background), AI document processor with OCR, personal AI assistant with VLM capabilities\n- Uses mock/simplified auth for development convenience only\n- Leverages AI capabilities: OCR, VLM (Vision Language Models), LLMs, vector search\n\n## üèóÔ∏è RECOMMENDED TECH STACK\n\n**Frontend**: Next.js (App Router) + React\n**UI**: Tailwind CSS + shadcn/ui + Radix UI\n**State**: Zustand + TanStack Query\n**Backend**: Next.js API Routes + Serverless Functions\n**Database**: PostgreSQL (Neon) + Prisma + pgvector\n**AI Integration**: OpenAI API, Anthropic Claude, vector embeddings\n\n**Essential rules for AI assistants working on AIPatternEnforcer.**\n\nUltrathink = think really hard and deep\n\n## ‚ö° IMMEDIATE ACTION COMMANDS\n\n```bash\n# First time? Start here:\nnpm run onboard                # Setup + first component (<5 min)\n\n# üö® CRITICAL: Turn on hook protection (edit .env file):\n# HOOK_DEVELOPMENT=false # Turn on hooks (disable development mode)\n# HOOK_TESTING=false     # Turn on hooks (disable testing mode)\n\n# Verify hooks are working:\nnpm run debug:hooks:validate   # Check hook status\n# Try creating \"test_improved.js\" - should be blocked!\n\n# Daily workflow:\nnpm run g:c ComponentName      # Generate component\nnpm test                       # Run tests\nnpm run check:all             # AUTOMATIC protection validation + lint + type + test\ngit add . && git commit       # Commit (auto-validated + auto-pushed)\n```\n\n## üõë CRITICAL RULES (READ FIRST)\n\n### NEVER DO THESE (WILL BREAK PROJECT)\n\n1. **NEVER create `*_improved.*`, `*_enhanced.*`, `*_v2.*`** - ALWAYS edit original files\n2. **NEVER create files in root directory** - Use subdirectories only\n3. **NEVER use `print()` or `console.log()` in production** - Use proper logging\n4. **NEVER add enterprise features** - See comprehensive exclusion list below\n5. **NEVER add complex authentication** - Use simple mock auth for local development only\n\n### üö´ COMPREHENSIVE ENTERPRISE FEATURE EXCLUSIONS\n\n**Authentication & User Management**\n\n- ‚ùå User sign-up/login systems (Clerk, Auth.js, Supabase Auth)\n- ‚ùå Role-based access control (RBAC)\n- ‚ùå User profiles and settings\n- ‚ùå Password reset flows\n- ‚ùå Multi-factor authentication\n- ‚ùå Session management\n- ‚ùå API key management for external users\n\n**Infrastructure & DevOps**\n\n- ‚ùå CI/CD pipelines (GitHub Actions beyond basic linting)\n- ‚ùå Docker/Kubernetes configs\n- ‚ùå Multi-environment deployments (staging, production)\n- ‚ùå Load balancers and auto-scaling\n- ‚ùå CDN configuration\n- ‚ùå Database migrations and rollbacks\n- ‚ùå Backup and disaster recovery\n- ‚ùå Health check endpoints\n- ‚ùå Graceful shutdown handlers\n\n**Monitoring & Observability**\n\n- ‚ùå Application Performance Monitoring (APM)\n- ‚ùå Distributed tracing (OpenTelemetry)\n- ‚ùå Log aggregation (DataDog, Splunk)\n- ‚ùå Custom metrics and dashboards\n- ‚ùå Error tracking services (Sentry)\n- ‚ùå Uptime monitoring\n- ‚ùå Real user monitoring (RUM)\n\n**Security & Compliance**\n\n- ‚ùå SOC2/HIPAA/GDPR compliance features\n- ‚ùå Audit logging\n- ‚ùå Data encryption at rest\n- ‚ùå IP whitelisting\n- ‚ùå DDoS protection\n- ‚ùå Web Application Firewall (WAF)\n- ‚ùå Security headers beyond basics\n- ‚ùå Penetration testing tools\n\n**Team & Collaboration**\n\n- ‚ùå Code review workflows\n- ‚ùå Team documentation wikis\n- ‚ùå Shared development environments\n- ‚ùå Feature flags systems\n- ‚ùå A/B testing frameworks\n- ‚ùå Multi-developer git workflows\n- ‚ùå Project management integrations\n\n**Business Features**\n\n- ‚ùå Payment processing (Stripe, PayPal)\n- ‚ùå Subscription management\n- ‚ùå Usage-based billing\n- ‚ùå Invoice generation\n- ‚ùå Admin dashboards\n- ‚ùå Customer support tools\n- ‚ùå Email notification systems\n- ‚ùå Marketing analytics\n- ‚ùå Referral systems\n\n**API & Integration**\n\n- ‚ùå GraphQL layers\n- ‚ùå REST API versioning\n- ‚ùå API documentation (Swagger/OpenAPI)\n- ‚ùå Webhook systems\n- ‚ùå Rate limiting for external APIs\n- ‚ùå API gateway patterns\n- ‚ùå Third-party OAuth integrations\n- ‚ùå Event-driven architectures\n\n**Data & Analytics**\n\n- ‚ùå Data warehousing\n- ‚ùå ETL pipelines\n- ‚ùå Business intelligence tools\n- ‚ùå Complex caching strategies (Redis clusters)\n- ‚ùå Read replicas\n- ‚ùå Database sharding\n- ‚ùå Change data capture (CDC)\n\n**ANYTHING THAT'S ABOUT TEAMS**\n\n### ALWAYS DO THESE\n\n1. **ALWAYS use generators** - `npm run g:c ComponentName` for new components\n2. **ALWAYS write tests first** - No exceptions\n3. **ALWAYS run `npm run check:all` before commits**\n4. **ALWAYS keep it simple** - This is for local personal projects, not production systems\n5. **ALWAYS use mock data** - No real user accounts, use mockUser from lib/auth.ts\n\n> üìñ **Need more details?** [Skip to full documentation](#-detailed-documentation) | [Quick\n> Reference](docs/quick-reference.md)\n> üÜò **Having issues?** [Common fixes](#-common-issues) | [QUICK-START.md](QUICK-START.md)\n\n---\n\n# üìñ DETAILED DOCUMENTATION\n\n_The sections below provide comprehensive guidance. Use the commands above for immediate action._\n\n## Table of Contents\n\n**Quick Reference:**\n\n1. [Daily Commands](#daily-commands)\n2. [Key Files](#key-files)\n3. [Common Issues](#-common-issues)\n\n**Complete Rules:** 4. [Root Directory Rules](#-root-directory-allowlist) 5. [Testing Requirements](#-testing-requirements) 6. [Documentation Standards](#-documentation-standards)\n\n**Advanced Usage:** 7. [Generator Usage](#-generator-usage) 8. [Debugging Methodology](#-debugging-methodology) 9. [AI Assistant Integration](#-ai-assistant-integration) 10. [Project Overview](#-project-overview)\n\n## üéØ QUICK REFERENCE\n\n### Daily Commands\n\n```bash\n# Development\nnpm run dev                    # Start development server\nnpm test                      # Run all tests\nnpm run lint                  # Run linting\nnpm run type-check           # Check types\n\n# Code Generation\nnpm run g:c ComponentName     # Enhanced component generator (interactive)\nnpm run g:component Name      # Basic component generator\n\n# Documentation\nnpm run doc:create            # Create documentation from templates (interactive)\nnpm run doc:create:readme     # Create README documentation\nnpm run doc:create:feature    # Create feature specification\nnpm run doc:create:api        # Create API reference\nnpm run doc:create:guide      # Create step-by-step guide\nnpm run doc:validate          # Validate documentation against templates\nnpm run doc:templates         # View available templates\n\n# Setup\nnpm run onboard               # Unified setup + first component (<5 min) - RECOMMENDED\nnpm run setup:quick           # 2-minute basic setup (minimal)\nnpm run setup:guided          # Interactive setup wizard (detailed)\n\n# Debugging\nnpm run debug:snapshot       # Capture debug context\nnpm run context             # Load AI context\n\n# Hook Protection System - AUTOMATIC VALIDATION\n# ‚úÖ AUTOMATIC: npm run check:all validates hook protection automatically\n# ‚úÖ AUTOMATIC: Blocks workflow if protection is disabled\n# ‚úÖ AUTOMATIC: No manual intervention needed for normal operation\n\n# üõ°Ô∏è AUTOMATIC PROTECTION VALIDATION:\n# npm run check:all now includes runtime protection validation\n# It automatically checks that hooks are actually working, not just configured\n# Perfect for \"super lazy\" coders - no manual debugging required!\n\n# üÜò EMERGENCY DEBUGGING (only if automatic validation fails):\nnpm run debug:hooks:monitor   # Real-time monitoring (manual)\nnpm run debug:hooks:validate  # Quick validation check\nnpm run debug:hooks:emergency # Emergency diagnostics only\n\n# üö® FOR \"SUPER LAZY\" CODERS:\n# Just run: npm run check:all\n# It will automatically validate everything and tell you if something is wrong\n# No need to remember debug commands - automation handles it!\n\n# Template Validation\nnpm run validate            # Comprehensive validation\nnpm run test:template       # Run all validation tests\n\n# Progress Tracking\nnpm run check:progress      # Check learning path progress\nnpm run setup:verify-ai     # Verify AI setup is working\n\n# Enforcement (Modern Hook System) - AUTOMATED\nnpm run check:all           # AUTOMATIC runtime protection validation + lint + type + test\nnpm run test                # Run tests\nnpm run lint                # Run ESLint\nnpm run type-check          # TypeScript validation\n\n# üö® AUTOMATIC PROTECTION VALIDATION:\n# npm run check:all now AUTOMATICALLY validates that hooks are working\n# It checks environment, configuration, and actual protection\n# Blocks workflow if protection is disabled - no manual intervention needed!\n\n# Real-time enforcement via Claude Code hooks (automatic):\n# - Prevents _improved files during AI interactions\n# - Blocks root directory violations\n# - Auto-fixes console.log ‚Üí logger\n# - Enforces Next.js structure\n# - Validates Prisma schemas\n# See .claude/settings.json for active hooks\n#\n# üö® SUPER LAZY CODER ALERT: HOOK SETUP REQUIRED\n# Hooks are OFF by default! You must turn them on or they won't protect you:\n#\n# STEP 1: Edit .env file and set:\n# HOOK_DEVELOPMENT=false # Turn on hooks (disable development mode)\n# HOOK_TESTING=false     # Turn on hooks (disable testing mode)\n#\n# STEP 2: Verify hooks are working:\n# npm run debug:hooks:validate  # Check if hooks are enabled\n#\n# STEP 3: Test that protection is working:\n# Try creating a file named \"test_improved.js\" - it should be blocked!\n#\n# üîß HOOK TROUBLESHOOTING FOR LAZY CODERS:\n# ‚Ä¢ Hooks not blocking bad patterns? ‚Üí Check .env file: HOOK_DEVELOPMENT=false\n# ‚Ä¢ Getting \"undefined\" in debug output? ‚Üí Run: npm run debug:hooks:validate\n# ‚Ä¢ Hooks running but not working? ‚Üí Run: npm run debug:hooks:emergency\n# ‚Ä¢ Want to see hooks in action? ‚Üí Run: npm run debug:hooks:monitor\n#\n# Granular folder-level control (advanced - most users don't need this):\n# export HOOK_AI_PATTERNS=true        # Controls ai-patterns/ hooks\n# export HOOK_ARCHITECTURE=true       # Controls architecture/ hooks\n# export HOOK_CLEANUP=true            # Controls cleanup/ hooks\n# export HOOK_CONTEXT=true            # Controls context/ hooks\n# export HOOK_IDE=true                # Controls ide/ hooks\n# export HOOK_LOCAL_DEV=true          # Controls local-dev/ hooks\n# export HOOK_PERFORMANCE=true        # Controls performance/ hooks\n# export HOOK_PROMPT=true             # Controls prompt/ hooks\n# export HOOK_PROJECT_BOUNDARIES=true # Controls project-boundaries/ hooks\n# export HOOK_SECURITY=true           # Controls security/ hooks\n# export HOOK_VALIDATION=true         # Controls validation/ hooks\n# export HOOK_WORKFLOW=true           # Controls workflow/ hooks\n```\n\n### Key Files\n\n- **Essential Rules**: `CLAUDE.md` (this file)\n- **Quick Reference**: `docs/quick-reference.md` - Commands & troubleshooting\n- **Workflow Integration**: `docs/guides/workflow-integration.md` - Complete system integration\n- **Documentation Index**: `DOCS_INDEX.md` - Complete navigation hub\n- **AI Config**: `ai/config/.cursorrules`\n- **Claude Code Hooks**: `.claude/settings.json` - Real-time enforcement\n- **Context Control**: `.aiignore`\n\n---\n\n## üõë CRITICAL RULES\n\n### NEVER DO THESE (WILL BREAK THE PROJECT)\n\n1. **NEVER create `*_improved.py`, `*_enhanced.py`, `*_v2.py`** - ALWAYS edit the original file\n2. **NEVER create files in root directory** - Use proper subdirectories (see allowlist below)\n3. **NEVER use bare except clauses** - Always specify exception types\n4. **NEVER use `print()` in production** - Use `logging.getLogger(__name__)` (enforced automatically)\n5. **NEVER use `console.log()` in production** - Use proper logging libraries (enforced automatically)\n6. **NEVER create announcement-style docs** - No \"This document describes!\"\n7. **NEVER implement workarounds** - ALWAYS fix root causes instead of symptoms\n   - ‚ùå Don't change document structure to satisfy wrong template validation\n   - ‚ùå Don't create special cases to bypass broken logic\n   - ‚ùå Don't add flags or switches to work around design flaws\n   - ‚úÖ Fix the underlying system causing the problem\n   - ‚úÖ Use Arrow-Chain RCA methodology to find true root cause\n   - ‚úÖ Make systems more robust and extensible for future cases\n\n### ALWAYS DO THESE\n\n1. **ALWAYS check existing code first** - Don't create duplicate functionality\n2. **ALWAYS use specific imports** - `from module import SpecificClass`\n3. **ALWAYS use generators** - `npm run g:c ComponentName` for new components\n4. **ALWAYS write tests first** - No exceptions, see [Test-First Development](docs/guides/testing/comprehensive-testing-guide.md)\n5. **ALWAYS run enforcement checks** - `npm run check:all` before commits\n6. **ALWAYS use measured, technical language** - Avoid superlatives in technical contexts\n\n---\n\n## üìÅ ROOT DIRECTORY MANAGEMENT\n\n**CRITICAL**: AIPatternEnforcer is a META-PROJECT for creating templates, NOT an application itself.\n\n### üö® Root Directory Decision Checklist\n\nWhen you encounter or want to create files in the root directory, follow this checklist:\n\n#### 1. **STOP and IDENTIFY** - What type of file is this?\n\n- [ ] Is it a meta-project configuration file? (package.json, tsconfig.json for tools)\n- [ ] Is it a top-level documentation file? (README.md, CONTRIBUTING.md)\n- [ ] Is it application code? (components/, app/, lib/, pages/)\n- [ ] Is it a build artifact? (dist/, .next/, \\*.tsbuildinfo)\n\n#### 2. **DECIDE** - Where does it belong?\n\n**‚úÖ KEEP in Root** if it's:\n\n- **Meta-project Documentation**:\n  - `README.md`, `LICENSE`, `CLAUDE.md`, `CONTRIBUTING.md`\n  - `SETUP.md`, `QUICK-START.md`, `USER-JOURNEY.md`, `DOCS_INDEX.md`\n- **Meta-project Configuration**:\n  - `package.json` (for the meta-project tools/scripts)\n  - `tsconfig.json` (configured for tools/, scripts/, NOT for app code)\n  - `.eslintrc.json`, `.prettierrc` (for enforcing project standards)\n  - `.gitignore`, `.env.example`\n- **CI/CD Files**: `.github/`, `.husky/`, `.vscode/settings.json`\n\n**üö´ MOVE from Root** if it's:\n\n- **Application Code**:\n  - `app/`, `components/`, `lib/`, `pages/` ‚Üí Move to `templates/[framework-name]/`\n  - `src/` ‚Üí Move to appropriate template or example\n- **Framework-Specific Config**:\n  - `next.config.js`, `vite.config.js` ‚Üí Move to `templates/[framework-name]/`\n  - `tailwind.config.js`, `postcss.config.js` ‚Üí Move to template directory\n  - `jest.config.js` (for app testing) ‚Üí Move to template directory\n- **Documentation**:\n  - Reports/Analysis ‚Üí `docs/reports/`\n  - Plans/Proposals ‚Üí `docs/plans/`\n  - Guides/Tutorials ‚Üí `docs/guides/`\n- **Build Artifacts**:\n  - `dist/`, `build/`, `.next/` ‚Üí Add to .gitignore and delete\n  - `*.tsbuildinfo` ‚Üí Add to .gitignore and delete\n\n#### 3. **VERIFY** - Is this the right decision?\n\n- [ ] Does this file serve the META-PROJECT or a specific template?\n- [ ] Would this file make sense in every project created from this template?\n- [ ] Is this file specific to a particular framework (React/Next.js/Vue)?\n\n#### 4. **ACT** - Execute the decision\n\n- If KEEPING: Ensure it's in the root allowlist in `tools/enforcement/root-file-enforcement.js`\n- If MOVING: Use proper subdirectory structure\n- If DELETING: Also add to `.gitignore` to prevent recreation\n\n### üîç Common Mistakes and Fixes\n\n| Found This                     | Do This                                     | Why                                     |\n| ------------------------------ | ------------------------------------------- | --------------------------------------- |\n| `app/` directory in root       | Move to `templates/nextjs-app-router/app/`  | App code belongs in templates           |\n| `components/` in root          | Move to `templates/[framework]/components/` | UI components are framework-specific    |\n| `next.config.js` in root       | Move to `templates/nextjs-app-router/`      | Framework config belongs with framework |\n| `tsconfig.json` with app paths | Replace with tool-focused tsconfig          | Root tsconfig is for meta-project tools |\n| Random `*.md` files            | Move to `docs/[category]/`                  | Keep root clean, organize docs          |\n\n### üõ†Ô∏è Enforcement (Modern Hook System)\n\n- **Real-time prevention**: Claude Code hooks prevent violations automatically\n- **Manual checks**: `npm run check:all` for full validation\n- **Root directory**: Protected by block-root-mess.js hook\n\n**Remember**: The root directory is for managing the template system itself, not for building applications!\n\n---\n\n## üìÅ PROJECT OVERVIEW\n\n**AIPatternEnforcer** is a meta-project creating reusable project template structures that solve AI development\nfriction.\n\n### üè† LOCAL DEVELOPMENT FOCUS:\n\n- **Personal AI Projects**: AI dating assistants, document processors with OCR, VLM-powered assistants\n- **Single User**: No multi-tenancy, user management, or enterprise features\n- **Database**: PostgreSQL (Neon) + Prisma + pgvector for AI embeddings\n- **Mock Authentication**: Simple mockUser for development convenience\n- **AI Capabilities**: OCR, VLM (Vision Language Models), LLMs, vector search\n- **No Production Concerns**: Security, scaling, monitoring simplified for local use\n\n### Core Features:\n\n- **AI Configurations**: Centralized in `ai/config/`\n- **Code Generators**: `npm run g:c ComponentName` creates complete components with tests\n- **Context Management**: `npm run context` optimizes AI context windows\n- **Real-time Enforcement**: Claude Code hooks prevent anti-patterns during AI interactions\n- **Progressive Documentation**: Role-based guidance for different user types\n\n### File Organization (Next.js App Router):\n\n```text\nproject-root/\n‚îú‚îÄ‚îÄ app/                   # Next.js App Router pages and layouts\n‚îú‚îÄ‚îÄ components/            # React components\n‚îú‚îÄ‚îÄ lib/                   # Shared utilities and configurations\n‚îú‚îÄ‚îÄ prisma/               # Database schema and migrations\n‚îú‚îÄ‚îÄ public/               # Static assets\n‚îú‚îÄ‚îÄ tests/                # Test files\n‚îú‚îÄ‚îÄ scripts/              # Development scripts\n‚îú‚îÄ‚îÄ docs/                 # Documentation\n‚îú‚îÄ‚îÄ ai/                   # AI configurations\n‚îú‚îÄ‚îÄ tools/                # Development utilities\n‚îî‚îÄ‚îÄ templates/            # Code generation templates\n```\n\n---\n\n## üöÄ QUICK START COMMANDS\n\n```bash\n# Quick start (recommended)\nnpm install\nnpm run onboard           # Complete setup + first component\n\n# Alternative manual approach\nnpm run setup:hooks       # Just git hooks setup\nnpm run g:c TestComponent # Generate component manually\n\n# Verify setup works\nnpm test\nnpm run lint\nnpm run validate\n```\n\n---\n\n## üß™ TESTING REQUIREMENTS\n\n### MANDATORY Before ANY Commit:\n\n```bash\nnpm test                   # All tests must pass\nnpm run lint              # No linting errors\nnpm run type-check        # No type errors\nnpm run check:all         # All enforcement checks (lint + type + test)\n```\n\n### Test Coverage:\n\n- **Minimum**: 80% overall coverage\n- **Critical paths**: 100% coverage required\n- **New features**: 90% coverage before merge\n\n**Details**: See [Test-First Development](docs/guides/testing/comprehensive-testing-guide.md) for complete methodology\n\n---\n\n## üõ°Ô∏è PRIMARY AI PROTECTION SYSTEM\n\n### Claude Code Hooks: Primary AI Development Protection\n\nAIPatternEnforcer uses **Claude Code hooks** as the **preferred solution for AI development issues**:\n\n**üéØ Hooks are the Primary Defense**: Real-time prevention of AI anti-patterns during development with comprehensive coverage across 8 categories and 21 specialized hooks.\n\n**üîß Hook Configuration**: All hook settings are configured in `.env` file:\n\n**Global Controls** (override all folder controls):\n\n- `HOOK_DEVELOPMENT=false` - Turn on hooks (disable development mode)\n- `HOOK_TESTING=false` - Turn on hooks (disable testing mode)\n\n**üéõÔ∏è Granular Folder Control** (only applies when global controls are `false`):\n\n- `HOOK_AI_PATTERNS=true/false` - AI pattern enforcement (prevent-improved-files, context validation)\n- `HOOK_ARCHITECTURE=true/false` - Architecture validation (test placement, structure validation)\n- `HOOK_CLEANUP=true/false` - Code cleanup (console.log fixes, import cleanup)\n- `HOOK_CONTEXT=true/false` - Context management (completeness, drift detection, CLAUDE.md injection)\n- `HOOK_IDE=true/false` - IDE integration (config checker, shortcut protection, workspace cleanup)\n- `HOOK_LOCAL_DEV=true/false` - Local development patterns (mock data, localhost enforcement)\n- `HOOK_PERFORMANCE=true/false` - Performance monitoring (vector DB hygiene, performance guardian)\n- `HOOK_PROMPT=true/false` - Prompt intelligence (quality checking, improvement suggestions)\n- `HOOK_PROJECT_BOUNDARIES=true/false` - Project structure protection (root mess blocker, enterprise antibody)\n- `HOOK_SECURITY=true/false` - Security scanning (scope limiting, security scan)\n- `HOOK_VALIDATION=true/false` - Template and API validation (Prisma validation, template integrity)\n- `HOOK_WORKFLOW=true/false` - Workflow enforcement (plan-first, test-first, PR scope)\n\n**Debug Control**:\n\n- `HOOK_VERBOSE=true/false` - Enable verbose hook output for debugging\n\n**üìã Control Priority**: Global controls override folder controls:\n\n1. `HOOK_DEVELOPMENT=true` ‚Üí All hooks bypassed\n2. `HOOK_TESTING=true` ‚Üí All hooks bypassed\n3. `HOOK_[FOLDER]=false` ‚Üí Only that folder's hooks bypassed\n4. Default ‚Üí All hooks run\n\n**üí° Common Usage Examples** (modify `.env` file):\n\n```bash\n# Development: Only critical protection hooks\nHOOK_DEVELOPMENT=false\nHOOK_PROJECT_BOUNDARIES=true  # Keep structure protection\nHOOK_SECURITY=true           # Keep security scanning\nHOOK_AI_PATTERNS=false       # Disable pattern enforcement\nHOOK_CLEANUP=false           # Disable auto-cleanup\nHOOK_PERFORMANCE=false       # Disable performance monitoring\n\n# Production: Everything except performance monitoring\nHOOK_DEVELOPMENT=false\nHOOK_PERFORMANCE=false       # Disable performance hooks\n# All others remain true\n\n# Testing: Only essential infrastructure protection\nHOOK_TESTING=false\nHOOK_PROJECT_BOUNDARIES=true\nHOOK_SECURITY=true\nHOOK_AI_PATTERNS=false\nHOOK_ARCHITECTURE=false\nHOOK_CLEANUP=false\nHOOK_CONTEXT=false\nHOOK_IDE=false\nHOOK_LOCAL_DEV=false\nHOOK_PERFORMANCE=false\nHOOK_PROMPT=false\nHOOK_VALIDATION=false\nHOOK_WORKFLOW=false\n```\n\n**Key Active Hooks** (see `.claude/settings.json` for complete list):\n\n- `prevent-improved-files.js` - Blocks creation of \\_improved, \\_v2, \\_enhanced files\n- `block-root-mess.js` - Prevents application files in root directory\n- `security-scan.js` - Basic security pattern detection\n- `fix-console-logs.js` - Auto-converts console.log to logger.info (PostToolUse)\n\n### Comprehensive Hook Protection Coverage\n\n**‚úÖ Hooks PROVIDE comprehensive protection for**:\n\n- **File naming anti-patterns** (\\_improved, \\_v2, \\_enhanced files)\n- **Project structure enforcement** (root directory protection, proper organization)\n- **Security scanning** (vulnerability detection, scope limiting)\n- **Code quality** (console.log cleanup, import optimization)\n- **Architecture validation** (test placement, API structure)\n- **AI pattern enforcement** (context efficiency, streaming patterns)\n- **Performance monitoring** (vector DB hygiene, optimization tracking)\n- **Template integrity** (documentation compliance, validation)\n\n**üîß Additional Support Tools** (complement hooks):\n\n- Context management (CLAUDE.md files, .cursorrules)\n- Documentation templates and validation\n- Code generators and project structure\n\n**Example**:\n\n- **You try**: Create `component_improved.tsx`\n- **Hook blocks**: \"‚ùå Don't create component_improved.tsx ‚úÖ Edit the original file instead\"\n- **You do**: Edit existing `component.tsx` ‚Üí Works for file naming only\n\n### Performance and Reliability Concerns\n\n**Performance Impact**:\n\n- 21 hooks run on every file operation (100-500ms latency)\n- May be skipped under load due to timeouts (1-4 seconds)\n\n**Reliability Issues**:\n\n- Complete system bypass via `HOOK_DEVELOPMENT=true`\n- False sense of security - hooks don't address root causes\n- Maintenance overhead as AI patterns evolve\n\n### Integrated AI Development Solution\n\n**Hooks provide the foundation** for AI development protection, complemented by:\n\n1. **Real-time Hook Protection**: Primary defense against AI anti-patterns (21 hooks across 8 categories)\n2. **Context Management**: CLAUDE.md files, .cursorrules for persistent context\n3. **Structured Workflows**: Plan-first development, systematic code review\n4. **Template System**: Code generators and documentation enforcement\n5. **IDE Integration**: Optimized AI tool configuration and project structure\n\n**Hooks are the preferred first-line defense for AI development issues.**\n\n### üîß Hook Development & Customization\n\nFor project-specific validation requirements, create custom hooks:\n\n**Hook Development Guide**: [docs/guides/claude-code-hooks/05-hooks-development.md](docs/guides/claude-code-hooks/05-hooks-development.md)\n\n**Key Development Features:**\n\n- **85% code reduction** through HookRunner base class and shared utilities\n- **Parallel execution system** with automatic fallback mechanisms\n- **Comprehensive testing framework** with custom Jest matchers\n- **9 specialized categories** for organized hook development\n- **Production deployment** patterns and performance optimization\n\n### üß™ Testing Hook Functionality\n\n**Core Testing Commands** for verifying hook folder controls:\n\n**üö® CRITICAL ERROR TO AVOID**: Never use command-line environment variables when testing hooks.\n\n**‚ùå WRONG WAY** (This doesn't work):\n\n```bash\n# This is WRONG - hooks ignore command-line environment variables\nHOOK_DEVELOPMENT=false node tools/hooks/ai-patterns/prevent-improved-files.js\nHOOK_AI_PATTERNS=true echo '{\"tool_input\": {\"file_path\": \"test.js\"}}' | node tools/hooks/ai-patterns/prevent-improved-files.js\n```\n\n**‚úÖ CORRECT WAY** (Always modify .env file):\n\n```bash\n# Test 1: Verify folder-specific bypass (AI Patterns disabled)\n# Edit .env: Set HOOK_DEVELOPMENT=false, HOOK_AI_PATTERNS=false\necho '{\"tool_input\": {\"file_path\": \"test_improved.js\"}}' | node tools/hooks/ai-patterns/prevent-improved-files.js\n# Expected: No output (hook bypassed)\n\n# Test 2: Verify hook execution (AI Patterns enabled)\n# Edit .env: Set HOOK_DEVELOPMENT=false, HOOK_AI_PATTERNS=true\necho '{\"tool_input\": {\"file_path\": \"test_improved.js\"}}' | node tools/hooks/ai-patterns/prevent-improved-files.js\n# Expected: Error message blocking _improved file\n\n# Test 3: Verify parallel executor with folder filtering\n# Edit .env: Set HOOK_DEVELOPMENT=false, HOOK_AI_PATTERNS=false\nHOOK_VERBOSE=true echo '{\"tool_input\": {\"file_path\": \"templates/test_improved.js\"}}' | node tools/hooks/pre-tool-use-parallel.js\n# Expected: Filtered hook count message, no AI pattern enforcement\n\n# Test 4: Verify global override\n# Edit .env: Set HOOK_DEVELOPMENT=true (any folder settings)\necho '{\"tool_input\": {\"file_path\": \"test_improved.js\"}}' | node tools/hooks/ai-patterns/prevent-improved-files.js\n# Expected: No output (global bypass active)\n```\n\n**Why this matters**: HookRunner loads environment variables from the .env file, not from command-line variables. Using command-line variables leads to incorrect test results and false assumptions about hook behavior.\n\n**Quick Verification**: Run `npm test -- tools/hooks/__tests__/folder-control.test.js` for comprehensive automated testing.\n\n---\n\n## üìö DOCUMENTATION STANDARDS\n\n### Writing Rules:\n\n- ‚ùå NO: \"This document describes...\", \"Implemented!\", superlatives\n- ‚úÖ YES: Professional, timeless, measured language\n- ‚úÖ YES: Link to source files with line numbers\n- ‚úÖ YES: Technical descriptions without overconfidence\n\n### Template Requirements:\n\n- **ALWAYS use templates for new documentation** - `npm run doc:create`\n- **NEVER skip required template sections** - All headers must be present\n- **ALWAYS validate against templates** - `npm run doc:validate filename.md`\n- **Available templates**: README, Feature, API, Guide, Report\n- **Template guide**: [Template Usage](docs/guides/documentation/template-usage.md)\n\n### Documentation Cleanup:\n\n**DELETE completion docs immediately** - Never create \"COMPLETE.md\", \"FINAL.md\", \"SUMMARY.md\"\n\n---\n\n## üî® GENERATOR USAGE\n\n**ALWAYS use generators for new code.**\n\n### Available Generators:\n\n```bash\nnpm run g:c ComponentName          # Interactive component generator\nnpm run g:component ComponentName  # Basic component generator\n```\n\n### Generator Creates:\n\n- Component file with TypeScript\n- Test file with comprehensive tests\n- Stories file for Storybook\n- CSS module for styles\n- Index file for exports\n\n**Details**: See [Generator Usage Guide](docs/guides/generators/using-generators.md) for complete information\n\n---\n\n## üêõ DEBUGGING METHODOLOGY\n\n### Always Use Arrow-Chain RCA:\n\n1. **Symptom** - What user sees\n2. **Trace** - Follow data flow\n3. **Arrow chain** - Map transformations\n4. **Hypothesis** - Root cause theory\n5. **Validate** - Reproduce and test fix\n6. **Patch** - Implement at root cause\n\n### Debug Context:\n\n```bash\nnpm run debug:snapshot     # Capture full debugging context\n```\n\n**Full methodology**: See [Arrow-Chain Root-Cause Analysis](docs/guides/debugging/systematic-debugging.md)\n\n---\n\n## ü§ñ AI ASSISTANT INTEGRATION\n\n### Context Loading:\n\n```bash\nnpm run context           # Load optimized context for AI tools\nnpm run context -- src/file.ts  # Context for specific file\n```\n\n### AI Tool Configuration:\n\n- **Cursor**: `.cursorrules` file ready to use\n- **Claude**: Context commands provide optimized prompts\n- **Copilot**: Configurations in `ai/config/`\n\n### Working with AI:\n\n- **ALWAYS provide file paths** in requests\n- **ALWAYS paste current code** - don't rely on AI file reading\n- **ALWAYS include test requirements**\n- **ALWAYS specify coding standards**\n\n**Complete guidelines**: See [AI Assistant Setup Guide](docs/guides/ai-development/ai-assistant-setup.md)\n\n---\n\n## ‚ö†Ô∏è COMMON ISSUES\n\n### Quick Fixes:\n\n```bash\n# Module not found\nnpm install\n\n# Port already in use\nlsof -ti:3000 | xargs kill -9\n\n# Generator not working\nnpm run setup:hooks\n\n# Tests failing\nnpm run validate\n```\n\n**Complete troubleshooting**: See [Documentation Index](./DOCS_INDEX.md) for specific guides\n\n---\n\n## üìñ NAVIGATION\n\n### For Different Users:\n\n- **üü¢ New Users**: [AI Assistant Setup](docs/guides/ai-development/ai-assistant-setup.md) ‚Üí [Documentation Hub](docs/README.md)\n- **üü° Existing Users**: Use commands above + [Generator demos](docs/guides/generators/)\n- **üî¥ Expert Users**: [Documentation Index](./DOCS_INDEX.md) + [Architecture docs](docs/architecture/)\n\n### For Specific Tasks:\n\n- **Setup Project**: [AI Assistant Setup](docs/guides/ai-development/ai-assistant-setup.md)\n- **Generate Code**: `npm run g:c ComponentName`\n- **Debug Issues**: `npm run debug:snapshot` + Arrow-Chain RCA\n- **Test Code**: Test-First Development methodology\n- **Configure AI**: AI configurations in `ai/config/`\n\n### For Complete Information:\n\n- **Full Methodology**: [Documentation Index](./DOCS_INDEX.md)\n- **Technical Architecture**: [Architecture Documentation](docs/architecture/)\n- **Frontend Rules**: [Documentation Index](./DOCS_INDEX.md) > Development Workflows\n- **Performance Standards**: [Performance Guide](docs/guides/performance/optimization-playbook.md)\n- **IDE Setup**: [AI Assistant Setup](docs/guides/ai-development/ai-assistant-setup.md)\n\n---\n\n**üéØ REMEMBER**: This is a condensed reference. For comprehensive guidance, workflows, and detailed methodologies,\nalways refer to [Documentation Index](./DOCS_INDEX.md).\n\n---\n\nEND OF CRITICAL INSTRUCTIONS\n",
    "timestamp": 1752684230758
  }
}
