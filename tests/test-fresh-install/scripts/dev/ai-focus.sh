#!/bin/bash

# AI Context Focus Manager
# Dynamically creates focused .aiignore for specific features/tasks
# Usage: npm run ai:focus [feature-name]

set -e

FEATURE_NAME=$1
PROJECT_ROOT=$(pwd)
AI_CONTEXT_DIR="$PROJECT_ROOT/.ai-context"
CONTEXT_FILE="$AI_CONTEXT_DIR/$FEATURE_NAME.context"
BACKUP_AIIGNORE="$PROJECT_ROOT/.aiignore.backup"
FOCUS_CACHE="$AI_CONTEXT_DIR/.focus-cache"

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Create .ai-context directory if it doesn't exist
mkdir -p "$AI_CONTEXT_DIR"

# Function to show usage
show_usage() {
    echo "Usage: npm run ai:focus [feature-name|--list|--clear|--show]"
    echo ""
    echo "Commands:"
    echo "  feature-name    Focus AI context on a specific feature"
    echo "  --list         List all available contexts"
    echo "  --clear        Restore original .aiignore"
    echo "  --show         Show current focus status"
    echo "  --auto         Auto-detect feature from git branch"
    echo ""
    echo "Examples:"
    echo "  npm run ai:focus payment-integration"
    echo "  npm run ai:focus --auto"
    exit 1
}

# Function to detect feature from git branch
auto_detect_feature() {
    BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")
    if [[ -z "$BRANCH" || "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
        echo -e "${YELLOW}Cannot auto-detect feature from branch. Using general context.${NC}"
        FEATURE_NAME="general"
    else
        # Extract feature name from branch (e.g., feature/payment-integration -> payment-integration)
        FEATURE_NAME=$(echo "$BRANCH" | sed -E 's/^(feature|fix|chore|docs)\///')
        echo -e "${GREEN}Auto-detected feature: $FEATURE_NAME${NC}"
    fi
}

# Function to analyze file relevance
calculate_relevance() {
    local file=$1
    local feature=$2
    local score=0
    
    # Check if file contains feature name
    if echo "$file" | grep -qi "$feature"; then
        score=$((score + 50))
    fi
    
    # Check recent git activity
    if git log --since="7 days ago" --name-only | grep -q "^$file$"; then
        score=$((score + 30))
    fi
    
    # Check if file imports are related
    if [[ -f "$file" ]]; then
        # Look for imports/requires that might be related
        if grep -l "import.*$feature\|from.*$feature\|require.*$feature" "$file" 2>/dev/null; then
            score=$((score + 20))
        fi
    fi
    
    echo $score
}

# Function to find related files
find_related_files() {
    local feature=$1
    local context_file=$2
    
    echo "# AI Context for: $feature" > "$context_file"
    echo "# Generated: $(date)" >> "$context_file"
    echo "# Files included based on relevance scoring" >> "$context_file"
    echo "" >> "$context_file"
    
    # Core files always included
    echo "# Core Files (Always Included)" >> "$context_file"
    echo "!CLAUDE.md" >> "$context_file"
    echo "!.cursorrules" >> "$context_file"
    echo "!package.json" >> "$context_file"
    echo "!.env.example" >> "$context_file"
    echo "" >> "$context_file"
    
    # Find files with high relevance
    echo "# Feature-Specific Files" >> "$context_file"
    
    # Search for files containing the feature name
    echo -e "${YELLOW}Analyzing codebase for '$feature' related files...${NC}"
    
    # Find all source files
    find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.py" -o -name "*.go" -o -name "*.rs" \) \
        -not -path "./node_modules/*" \
        -not -path "./.git/*" \
        -not -path "./dist/*" \
        -not -path "./build/*" | while read -r file; do
        
        relevance=$(calculate_relevance "$file" "$feature")
        
        if [[ $relevance -gt 40 ]]; then
            echo "!$file  # relevance: $relevance" >> "$context_file"
        fi
    done
    
    # Find test files
    echo "" >> "$context_file"
    echo "# Related Test Files" >> "$context_file"
    find . -type f -name "*test*" -o -name "*spec*" | grep -i "$feature" | while read -r file; do
        echo "!$file" >> "$context_file"
    done
    
    # Find documentation
    echo "" >> "$context_file"
    echo "# Related Documentation" >> "$context_file"
    find ./docs -type f -name "*.md" 2>/dev/null | xargs grep -l "$feature" 2>/dev/null | while read -r file; do
        echo "!$file" >> "$context_file"
    done
}

# Function to create focused .aiignore
create_focused_aiignore() {
    local context_file=$1
    
    # Backup current .aiignore if not already backed up
    if [[ -f "$PROJECT_ROOT/.aiignore" ]] && [[ ! -f "$BACKUP_AIIGNORE" ]]; then
        cp "$PROJECT_ROOT/.aiignore" "$BACKUP_AIIGNORE"
        echo -e "${GREEN}Backed up original .aiignore${NC}"
    fi
    
    # Create new .aiignore
    cat > "$PROJECT_ROOT/.aiignore" << EOF
# AI Context Focus: $FEATURE_NAME
# Generated by: npm run ai:focus
# Original .aiignore backed up to .aiignore.backup

# Ignore everything by default
*
**/*

# But include these specific files for the current feature
EOF
    
    # Add included files from context
    grep "^!" "$context_file" >> "$PROJECT_ROOT/.aiignore"
    
    # Always include certain directories
    cat >> "$PROJECT_ROOT/.aiignore" << EOF

# Always include AI configuration
!ai/
!ai/**/*
!.ai-context/
!.ai-context/**/*

# Include project configuration
!.vscode/
!.vscode/**/*
!.github/
!.github/**/*

# Never include these (override)
node_modules/
dist/
build/
.next/
coverage/
*.log
.env
.env.local
EOF
    
    # Track what AI has seen
    echo "$FEATURE_NAME|$(date +%s)" >> "$FOCUS_CACHE"
    
    # Count included files
    INCLUDED_COUNT=$(grep -c "^!" "$PROJECT_ROOT/.aiignore" || true)
    echo -e "${GREEN}✓ AI context focused on '$FEATURE_NAME' with $INCLUDED_COUNT relevant files${NC}"
}

# Function to show current focus status
show_focus_status() {
    if [[ -f "$FOCUS_CACHE" ]]; then
        echo -e "${GREEN}Current AI Focus Status:${NC}"
        echo ""
        
        # Show current focus
        CURRENT_FOCUS=$(tail -n 1 "$FOCUS_CACHE" 2>/dev/null | cut -d'|' -f1 || echo "none")
        echo -e "Active Focus: ${YELLOW}$CURRENT_FOCUS${NC}"
        
        # Show recent focuses
        echo -e "\nRecent Context Switches:"
        tail -n 5 "$FOCUS_CACHE" | while IFS='|' read -r feature timestamp; do
            date_str=$(date -r "$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "unknown")
            echo "  - $feature ($date_str)"
        done
        
        # Show file count
        if [[ -f "$PROJECT_ROOT/.aiignore" ]]; then
            INCLUDED_COUNT=$(grep -c "^!" "$PROJECT_ROOT/.aiignore" || true)
            echo -e "\nFiles in current context: ${GREEN}$INCLUDED_COUNT${NC}"
        fi
    else
        echo -e "${YELLOW}No active AI focus. Use 'npm run ai:focus [feature]' to set one.${NC}"
    fi
}

# Function to list available contexts
list_contexts() {
    echo -e "${GREEN}Available AI Contexts:${NC}"
    echo ""
    
    if [[ -d "$AI_CONTEXT_DIR" ]]; then
        for context in "$AI_CONTEXT_DIR"/*.context; do
            if [[ -f "$context" ]]; then
                basename "$context" .context
            fi
        done
    fi
    
    echo ""
    echo "Create a new context with: npm run ai:focus [feature-name]"
}

# Function to clear focus
clear_focus() {
    if [[ -f "$BACKUP_AIIGNORE" ]]; then
        mv "$BACKUP_AIIGNORE" "$PROJECT_ROOT/.aiignore"
        echo -e "${GREEN}✓ Restored original .aiignore${NC}"
    else
        echo -e "${YELLOW}No backup found. Creating default .aiignore${NC}"
        cat > "$PROJECT_ROOT/.aiignore" << EOF
# Dependencies
node_modules/
.pnp/
.pnp.js

# Build outputs
dist/
build/
.next/
out/

# Logs and temp files
*.log
*.tmp
.DS_Store

# Environment files
.env*
!.env.example

# Test coverage
coverage/
.nyc_output/

# Large assets
*.mp4
*.mov
*.zip
*.tar.gz

# Generated files
*.generated.ts
*.generated.js
EOF
    fi
    
    echo "cleared|$(date +%s)" >> "$FOCUS_CACHE"
}

# Main logic
case "$1" in
    "")
        show_usage
        ;;
    "--list")
        list_contexts
        ;;
    "--clear")
        clear_focus
        ;;
    "--show")
        show_focus_status
        ;;
    "--auto")
        auto_detect_feature
        find_related_files "$FEATURE_NAME" "$AI_CONTEXT_DIR/$FEATURE_NAME.context"
        create_focused_aiignore "$AI_CONTEXT_DIR/$FEATURE_NAME.context"
        ;;
    *)
        FEATURE_NAME=$1
        find_related_files "$FEATURE_NAME" "$AI_CONTEXT_DIR/$FEATURE_NAME.context"
        create_focused_aiignore "$AI_CONTEXT_DIR/$FEATURE_NAME.context"
        ;;
esac