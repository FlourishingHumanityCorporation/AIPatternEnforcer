import { Router } from 'express';
import { {{name}}Controller } from '@/controllers/{{kebabCase name}}.controller';
import { {{name}}Service } from '@/services/{{kebabCase name}}.service';
import { {{name}}Repository } from '@/repositories/{{kebabCase name}}.repository';
import { authMiddleware } from '@/middleware/auth.middleware';
import { rateLimitMiddleware } from '@/middleware/rate-limit.middleware';
import { validateMiddleware } from '@/middleware/validate.middleware';
import { {{name}}Schema } from '@/schemas/{{kebabCase name}}.schema';

/**
 * {{name}} Routes
 * RESTful API routes for {{name}} operations
 */
export function create{{name}}Routes(): Router {
  const router = Router();
  
  // Initialize dependencies
  const {{camelCase name}}Repository = new {{name}}Repository();
  const {{camelCase name}}Service = new {{name}}Service({{camelCase name}}Repository);
  const {{camelCase name}}Controller = new {{name}}Controller({{camelCase name}}Service);

  // Apply middleware
  router.use(rateLimitMiddleware);
  router.use(authMiddleware); // Remove if no authentication needed

  /**
   * @swagger
   * /api/{{kebabCase name}}s:
   *   get:
   *     summary: Get all {{name}}s
   *     description: Retrieve a paginated list of {{name}}s with optional search and filtering
   *     tags: [{{name}}]
   *     parameters:
   *       - in: query
   *         name: page
   *         schema:
   *           type: integer
   *           minimum: 1
   *           default: 1
   *         description: Page number
   *       - in: query
   *         name: limit
   *         schema:
   *           type: integer
   *           minimum: 1
   *           maximum: 100
   *           default: 50
   *         description: Number of items per page
   *       - in: query
   *         name: search
   *         schema:
   *           type: string
   *         description: Search term
   *       - in: query
   *         name: sortBy
   *         schema:
   *           type: string
   *           enum: [createdAt, updatedAt, name]
   *           default: createdAt
   *         description: Sort by field
   *       - in: query
   *         name: sortOrder
   *         schema:
   *           type: string
   *           enum: [asc, desc]
   *           default: desc
   *         description: Sort order
   *     responses:
   *       200:
   *         description: List of {{name}}s
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 data:
   *                   type: array
   *                   items:
   *                     $ref: '#/components/schemas/{{name}}'
   *                 pagination:
   *                   $ref: '#/components/schemas/Pagination'
   *       400:
   *         $ref: '#/components/responses/BadRequest'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       500:
   *         $ref: '#/components/responses/InternalServerError'
   */
  router.get('/{{kebabCase name}}s', (req, res) => {{camelCase name}}Controller.getAll(req, res));

  /**
   * @swagger
   * /api/{{kebabCase name}}s/{id}:
   *   get:
   *     summary: Get {{name}} by ID
   *     description: Retrieve a specific {{name}} by its ID
   *     tags: [{{name}}]
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *           format: uuid
   *         description: {{name}} ID
   *     responses:
   *       200:
   *         description: {{name}} details
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 data:
   *                   $ref: '#/components/schemas/{{name}}'
   *       404:
   *         $ref: '#/components/responses/NotFound'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       500:
   *         $ref: '#/components/responses/InternalServerError'
   */
  router.get('/{{kebabCase name}}s/:id', (req, res) => {{camelCase name}}Controller.getById(req, res));

  /**
   * @swagger
   * /api/{{kebabCase name}}s:
   *   post:
   *     summary: Create new {{name}}
   *     description: Create a new {{name}} with the provided data
   *     tags: [{{name}}]
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/Create{{name}}Input'
   *     responses:
   *       201:
   *         description: {{name}} created successfully
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 data:
   *                   $ref: '#/components/schemas/{{name}}'
   *                 message:
   *                   type: string
   *       400:
   *         $ref: '#/components/responses/BadRequest'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       500:
   *         $ref: '#/components/responses/InternalServerError'
   */
  router.post('/{{kebabCase name}}s', 
    validateMiddleware({{name}}Schema.create),
    (req, res) => {{camelCase name}}Controller.create(req, res)
  );

  /**
   * @swagger
   * /api/{{kebabCase name}}s/{id}:
   *   put:
   *     summary: Update {{name}} by ID
   *     description: Update an existing {{name}} with the provided data
   *     tags: [{{name}}]
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *           format: uuid
   *         description: {{name}} ID
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             $ref: '#/components/schemas/Update{{name}}Input'
   *     responses:
   *       200:
   *         description: {{name}} updated successfully
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 data:
   *                   $ref: '#/components/schemas/{{name}}'
   *                 message:
   *                   type: string
   *       400:
   *         $ref: '#/components/responses/BadRequest'
   *       404:
   *         $ref: '#/components/responses/NotFound'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       500:
   *         $ref: '#/components/responses/InternalServerError'
   */
  router.put('/{{kebabCase name}}s/:id', 
    validateMiddleware({{name}}Schema.update),
    (req, res) => {{camelCase name}}Controller.update(req, res)
  );

  /**
   * @swagger
   * /api/{{kebabCase name}}s/{id}:
   *   delete:
   *     summary: Delete {{name}} by ID
   *     description: Delete an existing {{name}} by its ID
   *     tags: [{{name}}]
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *           format: uuid
   *         description: {{name}} ID
   *     responses:
   *       200:
   *         description: {{name}} deleted successfully
   *         content:
   *           application/json:
   *             schema:
   *               type: object
   *               properties:
   *                 message:
   *                   type: string
   *       404:
   *         $ref: '#/components/responses/NotFound'
   *       401:
   *         $ref: '#/components/responses/Unauthorized'
   *       500:
   *         $ref: '#/components/responses/InternalServerError'
   */
  router.delete('/{{kebabCase name}}s/:id', (req, res) => {{camelCase name}}Controller.delete(req, res));

  return router;
}

/**
 * @swagger
 * components:
 *   schemas:
 *     {{name}}:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *           format: uuid
 *           description: Unique identifier
 *         name:
 *           type: string
 *           description: {{name}} name
 *         description:
 *           type: string
 *           description: {{name}} description
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Creation timestamp
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Last update timestamp
 *       required:
 *         - id
 *         - name
 *         - createdAt
 *         - updatedAt
 *     
 *     Create{{name}}Input:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 255
 *           description: {{name}} name
 *         description:
 *           type: string
 *           maxLength: 1000
 *           description: {{name}} description
 *       required:
 *         - name
 *     
 *     Update{{name}}Input:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           minLength: 1
 *           maxLength: 255
 *           description: {{name}} name
 *         description:
 *           type: string
 *           maxLength: 1000
 *           description: {{name}} description
 *     
 *     Pagination:
 *       type: object
 *       properties:
 *         page:
 *           type: integer
 *           minimum: 1
 *           description: Current page number
 *         limit:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           description: Items per page
 *         total:
 *           type: integer
 *           minimum: 0
 *           description: Total number of items
 *         pages:
 *           type: integer
 *           minimum: 0
 *           description: Total number of pages
 *       required:
 *         - page
 *         - limit
 *         - total
 *         - pages
 *   
 *   responses:
 *     BadRequest:
 *       description: Bad request
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               error:
 *                 type: string
 *               message:
 *                 type: string
 *               details:
 *                 type: object
 *               timestamp:
 *                 type: string
 *                 format: date-time
 *     
 *     Unauthorized:
 *       description: Unauthorized
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               error:
 *                 type: string
 *               message:
 *                 type: string
 *               timestamp:
 *                 type: string
 *                 format: date-time
 *     
 *     NotFound:
 *       description: Resource not found
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               error:
 *                 type: string
 *               message:
 *                 type: string
 *               timestamp:
 *                 type: string
 *                 format: date-time
 *     
 *     InternalServerError:
 *       description: Internal server error
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               error:
 *                 type: string
 *               message:
 *                 type: string
 *               timestamp:
 *                 type: string
 *                 format: date-time
 *   
 *   tags:
 *     - name: {{name}}
 *       description: {{name}} operations
 */