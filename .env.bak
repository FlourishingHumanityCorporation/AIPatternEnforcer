# ===================================================================
# AIPatternEnforcer Environment Configuration
# ===================================================================

# ===================================================================
# HOOK SYSTEM CONFIGURATION
# ===================================================================

# Global Hook Control (override all folder controls)
# Set to false to enable hooks, true to disable all hooks
HOOKS_DISABLED=false

# Hook System Debugging
HOOK_VERBOSE=false

# ===================================================================
# Granular Hook Folder Controls (Alphabetical)
# Set to true to enable hooks in that folder, false to disable
# Only applies when HOOKS_DISABLED=false
# ===================================================================

# AI Integration (OpenAI, Anthropic, model validators)
HOOK_AI=true

# AI Pattern Enforcement (prevent-improved-files, context validation)
HOOK_AI_PATTERNS=true

# Architecture Validation (test placement, structure validation)
HOOK_ARCHITECTURE=true

# Code Cleanup (console.log fixes, import cleanup)
HOOK_CLEANUP=true

# Context Management (completeness, drift detection, CLAUDE.md injection)
HOOK_CONTEXT=true

# Data Processing (data validation, transformations)
HOOK_DATA=true

# Database Operations (Prisma, vector DB, migrations)
HOOK_DATABASE=true

# IDE Integration (config checker, shortcut protection, workspace cleanup)
HOOK_IDE=true

# Local Development Patterns (mock data, localhost enforcement)
HOOK_LOCAL_DEV=true

# Performance Monitoring (vector DB hygiene, performance guardian)
HOOK_PERFORMANCE=true

# Project Structure Protection (root mess blocker, enterprise antibody)
HOOK_PROJECT_BOUNDARIES=true

# Prompt Intelligence (quality checking, improvement suggestions)
HOOK_PROMPT=true

# Security Scanning (scope limiting, security scan)
HOOK_SECURITY=true

# State Management (Zustand, TanStack Query validators)
HOOK_STATE=true

# UI Components (component patterns, styling)
HOOK_UI=true

# UI Framework Integration (Tailwind, shadcn/ui validators)
HOOK_UI_FRAMEWORK=true

# Template and API Validation (Prisma validation, template integrity)
HOOK_VALIDATION=true

# Workflow Enforcement (plan-first, test-first, PR scope)
HOOK_WORKFLOW=true

# ===================================================================
# APPLICATION CONFIGURATION
# ===================================================================

# Node Environment
NODE_ENV=development

# Database Configuration (Required for Prisma)
DATABASE_URL=postgresql://username:password@localhost:5432/projecttemplate

# ===================================================================
# AI SERVICES CONFIGURATION
# ===================================================================

# AI API Keys (Choose the ones you need)
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Local AI Model Endpoints (Optional)
OLLAMA_BASE_URL=http://localhost:11434
LOCALAI_BASE_URL=http://localhost:8080

# Additional AI Configuration (Uncomment as needed)
# AI_MODEL=gpt-4
# AI_TEMPERATURE=0.7
# AI_MAX_TOKENS=4000

# ===================================================================
# MONITORING & DEBUGGING
# ===================================================================

# Logging Configuration
LOG_LEVEL=debug

# Error Tracking (Uncomment and configure as needed)
# SENTRY_DSN=your-sentry-dsn-here

# Feature Flags
ENABLE_DEBUG_MODE=true

# ===================================================================
# LOCAL DEVELOPMENT NOTES
# ===================================================================
# This is for local one-person AI apps - authentication is mocked
# No real user accounts needed - use mockUser from lib/auth.ts
# ===================================================================
